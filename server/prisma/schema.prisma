generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type Spec {
  label String
  body  String
}

model Item {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  sku       String   @unique
  price     Int
  imageUrls String[]
  variant   Json

  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, variant])
}

model Product {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  slug          String @unique
  category      String
  description   String
  price         Int
  imageUrl      String
  specs         Spec[]
  variantFields Json?
  items         Item[]
}

model CustomProduct {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  sku            String @unique
  name           String
  model          String
  slug           String @unique
  category       String
  description    String
  price          Int
  imageUrl       String
  specs          Spec[]
  customFields   Json
  customDefaults Json
}

enum Role {
  user
  admin
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}
